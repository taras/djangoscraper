# -*- coding: utf8 -*-
import time, datetime
from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.utils.misc import arg_to_iter
from scrapy.contrib.spiders.crawl import Rule
from scrapy import log

from scraper.models import Task
from scraper.tasks.task import ScraperTask
from scraper.utils.string import smart_str

from vacation.models import Review

class URLGetter(ScraperTask):
    
    def parse_start_url(self, response):
        base = 'http://www.tripadvisor.com/Search?q='
        resorts = Resort.objects.all()
        requests = []
        for resort in resorts:
            keywords = resort.name + ' ' + resort.city + ' ' + resort.country
            url = base + urllib.quote_plus(smart_str(keywords))
            request = Request(url, callback=self.get_url)
            request.meta['resortid'] = str(resort.id)
            requests.append(request)
        return requests
    
    def get_url(self, response):
        id = response.request.meta['resortid']
        hxs = HtmlXPathSelector(response)
        urls = hxs.x('//td[contains(@class,"searchPadding")]/a/@href').extract()
        if urls:
            url = urls[1]
        else:
            url = ''
            print id, ' could not find page'
            self.result['missing'].append(id)
        resort = Resort.objects.get(pk=id)
        if not urlparse(url)[1]:
            resort.ta_url = 'http://www.tripadvisor.com' + url
        resort.save()
        return []

class ReviewGetter(ScraperTask):
    
    rules = [
       # pagination
        Rule(SgmlLinkExtractor(restrict_xpaths='//div[@class="pagination"]/div/a/@href',unique=True, canonicalize=False), follow=True, process_links='eliminate'),
        # reviews
        Rule(SgmlLinkExtractor(restrict_xpaths='//div[@id="REVIEWS"]/div[contains(@id, "review")]/div/div[contains(@class, "quote")]/a',unique=True, canonicalize=False),\
             callback='parse_start_url', follow=True),
    ]

    def eliminate(self, links):
        for link in links:
            if '-r' in link:
                links.remove(link)
        return links
    
    def get(self, value) :
        ''' Returns first item in list or item itself and fixes unicode for string '''
        if isinstance(value, list):
            if len(value) > 0:
                value = value[0].encode('utf-8')
            else:
                value = ' '
        return value

    def voteToBool(self, value):
        return value.strip() == 'Yes'
        
    def convertToDatetime(self, value):
        try:
            value = time.strptime(value, "%B %Y")
        except:
            pass
        
        return value
    
    def cleanType(self, value):
        try:
            value = value.split(':')[1].strip()
        except:
            pass
        return value

    def parse_start_url(self, response):

        r = None

        try:
            resort = self.task.args['resort']
        except Exception, (ErrorMessage):
            resort = None
            log.msg('Missing resort id in task.args', log.ERROR, domain=self.spider.domain_name)
            log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
        else:
            hxs = HtmlXPathSelector(response)
            review = hxs.select('//div[@id="REVIEWS"]/div[contains(@class,"first")][contains(@class,"review")]')
            if len(review):
                review = review[0]
                r = Review()
                r.date = self.convertToDatetime(self.get(review.x('ul[@class="stayNfo"]/li[1]/text()').extract()).strip())
                r.reason = self.get(review.x('ul[@class="stayNfo"]/li/b[contains(text(), "Visit was for")]/../text()').extract()) 
                r.recommend = self.voteToBool(self.get(review.x('ul[@class="recoQstn"]/li[1]/text()[2]').extract()))
                r.type = self.cleanType(self.get(review.x('div[contains(@class, "forSave")]/div[@class="profile"]/div[contains(@class, "date")]/span[@class="triptype"]/text()').extract()))
                r.value = self.get(review.x('div[@class="rating-list"]/ul/li/ul[@class="first"]/li[1]/span/img/@alt').extract())
                r.rooms = self.get(review.x('div[@class="rating-list"]/ul/li/ul[@class="first"]/li[2]/span/img/@alt').extract())
                r.location = self.get(review.x('div[@class="rating-list"]/ul/li/ul[@class="first"]/li[3]/span/img/@alt').extract())
                r.cleanliness = self.get(review.x('div[@class="rating-list"]/ul/li/ul[@class="first"]/li[4]/span/img/@alt').extract())
                r.service = self.get(review.x('div[@class="rating-list"]/ul/li/ul[2]/li[1]/span/img/@alt').extract())
                r.ta_id = self.get(hxs.select('@id').extract()).strip('UR')
                r.resort = resort.id
            else:
                log.msg('Review could not be found on %s'%response.request.url, level=log.ERROR, domain=self.domain_name)
        
        if r:
            try:
                r.save()
            except Exception, (ErrorMessage):
                log.msg('Failed to save the review from url: %s'%response.request.url, log.ERROR, domain=self.spider.domain_name)
                log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
        
        return []

        
class 