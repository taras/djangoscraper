from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.utils.misc import arg_to_iter
from scrapy.contrib.spiders.crawl import Rule
from datetime import datetime, timedelta
from scrapy import log

import cgi, string, re
from urlparse import urlparse, urljoin

from scraper.models import Task
from scraper.tasks.task import ScraperTask
from scraper.utils.string import smart_str
from vacation.models import Package, Resort, Price
from scrapy.utils.url import url_query_parameter

def set_param(url, index, value):
    url = url.split(',')
    try:
        url[int(index)]=value
    except Exception, (ErrorMessage):
        log.msg('Could not change parameter %s on %s to %s'%(index, url, value), level=log.ERROR, domain='tripcentral.ca')
        log.msg(ErrorMessage, level=log.DEBUG, domain='tripcentral.ca')
    
    return string.join(url, ',')

def get_param(url, index):
    url = url.split(',')
    value = None
    try:
        value=url[int(index)]
    except Exception, (ErrorMessage):
        log.msg('Could not change parameter %s on %s to %s'%(index, url, value), level=log.ERROR, domain='tripcentral.ca')
        log.msg(ErrorMessage, level=log.DEBUG, domain='tripcentral.ca')
    return value

def get_query_value(name, url):
    if '?' in url:
        query = url.split('?')[1]
        query = cgi.parse_qs(query, keep_blank_values=True)
        
        if query.has_key(name):
            value = query[name]
            if isinstance(value, list) and len(value) > 0:
                return value[0]
            else:
                return value
    return None

class StartingPoint(ScraperTask):
    
    def parse_start_url(self, response):
        
        hxs = HtmlXPathSelector(response)
        hxs = hxs.select('//ul[@id="leadinmenuhome"]/li/ul/li/a')
        links = dict(zip(hxs.select('.//text()').extract(), hxs.select('.//@href').extract()))

        for name, link in links.iteritems():
            t = Task(name='scrape_resorts_from_origin',start_urls=link,\
                     description='Scrape resorts for %s'%name,\
                     priority=1.0, args={'name':name}, domain=self.spider.domain_name)
            try:
                t.save()
            except e:
                log.msg('Could not save task: %s, %s occured.'%(t.name, str(e)), domain=self.spider.domain_name, level=log.DEBUG)
        
        return []

class ResortCreator(ScraperTask):
    
    def parse_start_url(self, response):
        hxs = HtmlXPathSelector(response)        
        country = hxs.select('//td[contains(text(), "Country:")]/following-sibling::td/b/text()').extract()[0].strip()
        city = hxs.select('//td[contains(text(), "City:")]/following-sibling::td/b/text()').extract()[0].strip()
        name = hxs.select('//td[contains(text(), "Hotel:")]/following-sibling::td/b/text()').extract()[0].strip()
        resort = hxs.select('//td[@class="listcellheading0"]/span/text()').extract()[0].strip()
        
        try:
            rating = re.search('[^\(]*(\(.*\))[^\)]*', resort).group(1)
            rating = str(rating[1:len(rating)-1])[0:2]
        except:
            rating = ''
            
        tc_id = get_query_value('a3', response.request.url)
        
        r = Resort(name=name, country=country, city=city, stars=rating, tc_id=tc_id)
        try:
            r.save()
        except Exception, (ErrorMessage):
            log.msg('Could not save resort %s during creation.'%tc_id, level=log.ERROR, domain=self.spider.domain_name)
            log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
        else:
            log.msg('Created new resort %s'%name, level=log.INFO, domain=self.spider.domain_name)
            
        if r.id:
            departing = hxs.select('//td[contains(text(), "Departing from:")]/following-sibling::td/select/option/@value').extract()
            if departing:
                departing.remove('999')
                start_urls = [set_param(response.request.url, '9', p) for p in departing]
                start_urls.append(response.request.url)
            else:
                start_urls = response.request.url
            
            t = Task(name='get_packages', domain=self.spider.domain_name,\
                     start_urls=string.join(start_urls, '\n'), priority=2.0,\
                     description='Get packages for new resort' + name)
            try:
                t.save()
                log.msg('Created new get_packages task', level=log.INFO, domain=self.spider.domain_name)
            except:
                log.msg('Could not save get_packages task for %s'%name, level=log.ERROR, domain=self.spider.domain_name)
        
        return []

class ResortGetter(ScraperTask):
    
    main_xpath = '//html/body/form/center[2]/table/tr/td/table/tr/td/a[contains(@class,"findertbllink0")]'
    
    rules = [
        Rule(SgmlLinkExtractor(restrict_xpaths='/html/body/div/div[3]/div/div/ul[1]/li/a',unique=True, canonicalize=False),\
             callback='parse_start_url', follow=True),
        Rule(SgmlLinkExtractor(restrict_xpaths=main_xpath, deny='a3', \
                               unique=True, canonicalize=False),\
             callback='parse_start_url', follow=True),        
    ]
    
    def parse_start_url(self, response):
        if get_query_value('a2', response.request.url):
            hxs = HtmlXPathSelector(response)
            urls = hxs.select('//html/body/form/center[2]/table/tr/td/table/tr/td/a[contains(@class,"findertbllink0")]/@href').extract()
            
            if self.task.args.has_key('name'):
                origin = self.task.args['name']
            else:
                origin = ''
            
            get_packages_urls = []
            
            for url in urls:
                if self.spider.domain_name not in url:
                    url = 'http://tnpack.tripcentral.ca' + url
                id = get_query_value('a3', url)
                resort = Resort.objects.filter(tc_id=id)
                if resort:
                    get_packages_urls.append(url)
                else:
                    t = Task(name='create_resort', domain=self.spider.domain_name,\
                              priority=2.0, start_urls=url,\
                              description='Create resort')
                    t.save()
                
                t = Task(name='get_packages',domain=self.spider.domain_name,\
                         priority=2.0, start_urls=string.join(get_packages_urls,'\n'),\
                         description='Creating get_packages task for %s'%response.request.url)
                t.save()
                
        return []

class PackageGetter(ScraperTask):

    rules = [
            Rule(SgmlLinkExtractor(restrict_xpaths='/html/body/form/center[3]/table/tr/td/table/tr[1]/td/a[contains(text(), "Next")]', unique=True, canonicalize=False), callback='parse_start_url', follow=True)        
        ]
    
    def parse_start_url(self, response):
        hxs = HtmlXPathSelector(response)
        packages = hxs.select('//html/body/form/center[3]/table/tr/td/table/tr')
        urls = []

        resort_id = url_query_parameter(response.request.url, 'a3', default=get_param(response.request.url, 3))
            
        try:
            resort = Resort.objects.filter(tc_id=resort_id)[0]
        except Exception, (ErrorMessage):
            log.msg('Failed to open resort with resort id=%s'%resort_id, log.ERROR, domain=self.spider.domain_name)
            log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
            return []

        existing = [p.tc_id for p in Package.objects.filter(resort=resort.id)]

        for package in packages[2:len(packages)]:
            url = package.select('.//a/@href').extract()[0]
            date = package.select('.//a/text()').extract()[0]
            id = get_query_value('packageID', url)
            if id not in existing:
                url = 'http://www.tripcentral.ca/PHP/pack/packageDetailsPublic.php?packageID='+id
                info = package.select('.//td/text()').extract()
                if len(info) == 4 :
                    days, price, room_type, meal_plan = info
                    notes = ''
                elif len(info) == 5:
                    days, price, room_type, meal_plan, notes = info
                
                room_type = room_type.strip()
                days = int(days.strip())
                
                departure = datetime.strptime(date, '%a, %b %d, %y')
                back = departure + timedelta(days=days)
                
                try:
                    origin = hxs.select('//td[contains(text(), "Departing from:")]/following-sibling::td/select/option[@value="999"]/text()').extract()[0]
                except Exception, (ErrorMessage):
                    origin = ''
                    log.msg('Could not find departure city', log.ERROR, domain=self.spider.domain_name)
                    log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
                
                p = Package(origin=origin, tc_id=id, notes=notes, \
                            meal_plan=meal_plan, days=days, room_type=room_type, \
                            resort=resort, departure=departure, back=back)
                try:
                    p.save()
                except:
                    ep = Package.objects.filter(tc_id=id)[0]
                    log.msg('Existing: %s %s %s'%(ep.tc_id, ep.days, ep.meal_plan), level=log.DEBUG)                    
                    log.msg('New: %s %s %s'%(id, days, meal_plan))
                else:
                    log.msg('Created package to %s departing from %s'%(resort.name, origin), level=log.INFO, domain=self.spider.domain_name)
                urls.append(url)
            
        if urls:
            Task(start_urls=string.join(urls, '\n'), priority=2.0, domain='tripcentral.ca',
                                  name='get_price', description='Get for new packages from %s'%response.request.url).save()
    
        return [] 

    
class PriceGetter(ScraperTask):
    
    def parse_start_url(self, response):

        hxs = HtmlXPathSelector(response)
        
        base_price = hxs.select('//table[@id="pricing-info"]/tr/td[contains(text(), "Base Price")]/following-sibling::td/text()').extract()[0].strip('$').strip()
        tax = hxs.select('//table[@id="pricing-info"]/tr/td[contains(text(), "Tax/Surcharge")]/following-sibling::td/text()').extract()[0].strip('$').strip()
        
        id = get_query_value('packageID', response.request.url)

        package = Package.objects.filter(tc_id=id)
        if package:
            price = Price(price=base_price, tax=tax, package=package[0])
            try:
                price.save()
            except Exception, (ErrorMessage):
                log.msg('Could not save price (%s, %s) for package %s'%(base_price, tax, package[0].id), level=log.DEBUG)
                log.msg(ErrorMessage, level=log.DEBUG, domain=self.spider.domain_name)
            else:
                log.msg('Created new price for package %s'%id, level=log.INFO, domain=self.spider.domain_name)
        
        return [] 